from sklearn.datasets import make_blobs
import numpy as np

def simple_linear_set() :
    X, y = make_blobs(n_samples=100, n_features=2, centers=2, random_state=0)
    y = y.reshape((y.shape[0], 1))
    return X,y

def and_set() :
    X = np.array([[0,0],[0,1],[1,0],[1,1]])
    y = np.array([0,0,0,1]).reshape(4, 1)
    return X,y

def xor_set():
    X = np.array([[0,0],[0,1],[1,0],[1,1]])
    y = np.array([0,1,1,0]).reshape(4, 1)
    return X,y

def dataset_2_9():
    X = np.array([
        [1, 6],
        [7, 9],
        [1, 9],
        [7, 10],
        [2, 5],
        [2, 7],
        [2, 8],
        [6, 8],
        [6, 9],
        [3, 5],
        [3, 6],
        [3, 8],
        [3, 9],
        [5, 7],
        [5, 8],
        [5, 10],
        [5, 11],
        [4, 6],
        [4, 7],
        [4, 9],
        [4, 10]
    ])

    y = np.array([
        1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1
    ])

    y = y.reshape((y.shape[0], 1))

    return X, y

def dataset_2_10():
    X = np.array([
        [1, 2], [1, 4], [1, 5], [7, 5], [7, 6],
        [2, 1], [2, 3], [2, 4], [6, 2], [6, 4],
        [6, 5], [3, 1], [3, 2], [3, 4], [3, 5],
        [5, 3], [5, 4], [5, 6], [5, 7], [4, 2],
        [4, 3], [4, 5], [4, 6]
        ])

    y = np.array([
        1, 0, 1, 0, 0,
        0, 1, 0, 1, 0,
        0, 0, 0, 1, 1,
        0, 0, 1, 1, 0,
        1, 1, 1
        ])
    
    y = y.reshape((y.shape[0], 1))
    return X, y

def dataset_2_11():
    X = np.array([
        10, 14, 12, 18, 16, 14, 22, 28, 26, 16,
        23, 25, 20, 20, 24, 12, 15, 18, 14, 26,
        25, 17, 12, 20, 23, 22, 26, 22, 18, 21
    ]).reshape(-1, 1)

    y = np.array([
        4.4, 5.6, 4.6, 6.1, 6.0, 7.0, 6.8, 10.6, 11.0, 7.6,
        10.8, 10.0, 6.5, 8.2, 8.8, 5.5, 5.0, 8.0, 7.8, 9.0,
        9.4, 8.5, 6.4, 7.5, 9.0, 8.1, 8.2, 10.0, 9.1, 9.0
    ])

    y = y.reshape((y.shape[0], 1))
    return X, y

def dataset_3_1():
    # First, let's create empty lists to store our data
    X = []  # Features
    y = []  # Class labels (original 1, 2, 3)

    # Parse the data from the table
    data_rows = [
        # First class (Cl=1)
        [-1.2, 1.6, 1, 1, -1, -1], [-1.2, 1.5, 1, 1, -1, -1], [-1.2, 1, 1, 1, -1, -1],
        [-1.3, 1.7, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1], [-1.4, 1.7, 1, 1, -1, -1],
        [-1.2, 1.4, 1, 1, -1, -1], [-1.2, 1.6, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1],
        [-1.2, 1.6, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1], [-1.5, 1.7, 1, 1, -1, -1],
        [-1.3, 1.5, 1, 1, -1, -1], [-1.2, 1.2, 1, 1, -1, -1], [-1.2, 1.6, 1, 1, -1, -1],
        [-1.4, 1.5, 1, 1, -1, -1], [-1.3, 1.4, 1, 1, -1, -1], [-1.2, 1.7, 1, 1, -1, -1],
        [-1.2, 1.6, 1, 1, -1, -1], [-1.2, 1.9, 1, 1, -1, -1], [-1.2, 1.5, 1, 1, -1, -1],
        [-1.4, 1.5, 1, 1, -1, -1], [-1.1, 1.5, 1, 1, -1, -1], [-1.2, 1.7, 1, 1, -1, -1],
        [-1.2, 1.5, 1, 1, -1, -1], [-1.3, 1.3, 1, 1, -1, -1], [-1.1, 1.5, 1, 1, -1, -1],
        [-1.2, 1.5, 1, 1, -1, -1], [-1.2, 1.3, 1, 1, -1, -1], [-1.2, 1.3, 1, 1, -1, -1],
        [-1.4, 1.5, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1], [-1.1, 1.4, 1, 1, -1, -1],
        [-1.6, 1.6, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1], [-1.2, 1.5, 1, 1, -1, -1],
        [-1.3, 1.5, 1, 1, -1, -1], [-1.3, 1.3, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1],
        [-1.2, 1.2, 1, 1, -1, -1], [-1.2, 1.3, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1],
        [-1.1, 1.5, 1, 1, -1, -1], [-1.4, 1.9, 1, 1, -1, -1], [-1.2, 1.6, 1, 1, -1, -1],
        
        # Second class (Cl=2)
        [1.3, 5.6, 2, -1, 1, -1], [1.4, 6.1, 2, -1, 1, -1], [1.5, 5.9, 2, -1, 1, -1],
        [1.3, 5.6, 2, -1, 1, -1], [1.4, 5.2, 2, -1, 1, -1], [1.2, 5.5, 2, -1, 1, -1],
        [1.4, 6.7, 2, -1, 1, -1], [1, 5.7, 2, -1, 1, -1], [1.6, 6, 2, -1, 1, -1],
        [1.4, 5.8, 2, -1, 1, -1], [1.4, 6.1, 2, -1, 1, -1], [1.3, 5.7, 2, -1, 1, -1],
        [1, 5.5, 2, -1, 1, -1], [1.1, 5, 2, -1, 1, -1], [1.3, 6.6, 2, -1, 1, -1],
        [1.6, 6, 2, -1, 1, -1], [1.4, 5.8, 2, -1, 1, -1], [1.2, 5.7, 2, -1, 1, -1],
        [1, 4.9, 2, -1, 1, -1], [1.3, 5.7, 2, -1, 1, -1], [1.3, 5.5, 2, -1, 1, -1],
        [1.8, 5.9, 2, -1, 1, -1], [1.5, 6.3, 2, -1, 1, -1], [1.4, 5, 2, -1, 1, -1],
        [1.3, 6.3, 2, -1, 1, -1], [1.4, 7, 2, -1, 1, -1], [1.4, 6.6, 2, -1, 1, -1],
        [1.2, 5.8, 2, -1, 1, -1], [1.5, 6.2, 2, -1, 1, -1], [1.5, 6.4, 2, -1, 1, -1],
        [1.5, 5.4, 2, -1, 1, -1], [1.5, 6, 2, -1, 1, -1], [1.5, 6.9, 2, -1, 1, -1],
        [1.3, 6.4, 2, -1, 1, -1], [1.1, 5.1, 2, -1, 1, -1], [1.1, 5.6, 2, -1, 1, -1],
        [1.3, 5.6, 2, -1, 1, -1], [1.7, 6.7, 2, -1, 1, -1], [1.5, 6.5, 2, -1, 1, -1],
        [1.5, 5.6, 2, -1, 1, -1], [1.3, 5.7, 2, -1, 1, -1], [1.2, 6.1, 2, -1, 1, -1],
        [1.4, 6.8, 2, -1, 1, -1], [1.3, 6.2, 2, -1, 1, -1], [1.5, 6.7, 2, -1, 1, -1],
        
        # Third class (Cl=3)
        [2.8, 1.9, 3, -1, -1, 1], [2.9, 1.8, 3, -1, -1, 1], [2.2, 1.5, 3, -1, -1, 1],
        [2.5, 1.7, 3, -1, -1, 1], [3.1, 2.3, 3, -1, -1, 1], [2.8, 2.4, 3, -1, -1, 1],
        [3.3, 2.5, 3, -1, -1, 1], [3.4, 2.3, 3, -1, -1, 1], [3, 1.6, 3, -1, -1, 1],
        [3.1, 2.1, 3, -1, -1, 1], [2.6, 1.4, 3, -1, -1, 1], [3.1, 2.1, 3, -1, -1, 1],
        [2.7, 1.9, 3, -1, -1, 1], [3, 1.8, 3, -1, -1, 1], [2.8, 2, 3, -1, -1, 1],
        [3, 1.6, 3, -1, -1, 1], [2.9, 1.8, 3, -1, -1, 1], [3, 1.8, 3, -1, -1, 1],
        [2.8, 1.5, 3, -1, -1, 1], [2.8, 2.2, 3, -1, -1, 1], [3.2, 1.8, 3, -1, -1, 1],
        [3, 2.1, 3, -1, -1, 1], [3.3, 2.5, 3, -1, -1, 1], [3.1, 2.4, 3, -1, -1, 1],
        [2.7, 1.9, 3, -1, -1, 1], [3.2, 2.3, 3, -1, -1, 1], [3, 2.1, 3, -1, -1, 1],
        [3.2, 2, 3, -1, -1, 1], [3, 2, 3, -1, -1, 1], [3.2, 2.3, 3, -1, -1, 1],
        [2.8, 2, 3, -1, -1, 1], [3.6, 2.5, 3, -1, -1, 1], [3.4, 2.4, 3, -1, -1, 1],
        [3, 2.3, 3, -1, -1, 1], [2.5, 1.8, 3, -1, -1, 1], [2.6, 2.3, 3, -1, -1, 1],
        [3, 2.2, 3, -1, -1, 1], [3, 1.8, 3, -1, -1, 1], [3.2, 1.8, 3, -1, -1, 1],
        [2.7, 1.8, 3, -1, -1, 1], [3, 1.8, 3, -1, -1, 1], [2.7, 1.9, 3, -1, -1, 1],
        [2.5, 1.9, 3, -1, -1, 1], [3.3, 2.1, 3, -1, -1, 1], [2.8, 1.8, 3, -1, -1, 1],
    ]

    # Process the data into features, class labels, and one-hot encoding
    for row in data_rows:
        X.append([row[0], row[1]])  # Features: x1, x2
        y.append(row[2] - 1)        # Class label: adjust Cl (1,2,3) to (0,1,2)

    # Convert lists to numpy arrays
    X = np.array(X)
    y = np.array(y).reshape(-1, 1)  # Reshape y to be a column vector

    return X, y

def dataset_3_5():
    data_rows = [
        # Format: [x1, x2, ..., x25, d1, d2, d3, d4]
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1],
        [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -1, 1, -1, -1],
        [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, -1, -1, 1, -1],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, -1, -1, -1, 1]
    ]

    # Extraire X (features) et y (labels)
    X = np.array([row[:25] for row in data_rows])

    # Déterminer la classe à partir des colonnes d1, d2, d3, d4
    y = np.zeros(len(data_rows), dtype=int)
    for i, row in enumerate(data_rows):
        # La classe est l'index (0-based) de la valeur 1 dans d1, d2, d3, d4
        for j in range(4):
            if row[25+j] == 1:
                y[i] = j
                break

    y = y.reshape(-1, 1)  # Reshape y to be a column vector

    return X, y

def dataset_4_12():
    data = np.array([
        [-1.56, 0.93, 0],
        [-1.43, -1.29, 0],
        [1.03, 0.59, 1],
        [0.21, -0.04, 1],
        [-0.62, 1.25, 0],
        [1.21, 0.35, 1],
        [-0.1, -0.26, 1],
        [1.59, 1.75, 0],
        [-1.45, 1.71, 0],
        [0.79, -1.93, 0],
        [0.32, 0.28, 1],
        [0.57, 0.4, 1],
        [0.75, -0.07, 1],
        [-0.09, 0.15, 1],
        [1.79, 1.15, 0],
        [1.8, -0.18, 0],
        [1.85, 0.34, 0],
        [-0.53, -1.25, 0],
        [-0.4, 0.54, 1],
        [0.45, 0, 1],
        [0.04, 0.59, 1],
        [0.07, -0.81, 0],
        [-0.28, 0.78, 1],
        [0.21, 1.53, 0],
        [1.14, 0.14, 1],
        [-0.51, 0.06, 1],
        [-1.21, 0.76, 0],
        [0.35, 0.64, 1],
        [-0.65, 0.56, 1],
        [1.48, 1.31, 0],
        [1.6, 1.73, 0],
        [0.82, 0.68, 1],
        [-1.09, -1.18, 0],
        [1.75, -0.75, 0],
        [-0.14, 0.32, 1],
        [-1.39, -1.93, 0],
        [0.84, -0.1, 1],
        [-0.35, 0.43, 1],
        [-0.57, 0.31, 1],
        [-0.51, -1.26, 0],
        [-0.31, -1.71, 0],
        [-1.48, 1.25, 0],
        [-1.71, 0.18, 0],
        [-0.31, 0.7, 1],
        [0.07, 0.98, 1],
        [0.92, 0.42, 1],
        [0.71, 1.73, 0],
        [-1.45, -0.92, 0],
        [1.43, 1.01, 0],
        [0.6, 0.1, 1],
        [0.07, -1.31, 0],
        [0.76, 0.37, 1],
        [-0.9, 0.93, 0],
        [0.07, 0.09, 1],
        [0.95, 0.48, 1],
        [1.31, 1.57, 0],
        [-0.73, -0.68, 0],
        [0.17, 0.37, 1],
        [-0.12, 0.76, 1],
        [1.14, 1.31, 1],
        [-0.45, -0.07, 0],
        [0.21, 0.43, 1],
        [-0.01, 0.25, 1],
        [0.04, 1.82, 0],
        [-0.87, -1.56, 0],
        [0.57, -0.21, 1],
        [0.37, 0.51, 1],
        [0.43, 0.29, 1],
        [0.31, -1.68, 0],
        [1.25, -1.75, 0],
        [0.54, 0.67, 1],
        [1.29, -0.73, 0],
        [1.75, -0.25, 0],
        [0.42, -1.06, 0],
        [-0.26, -0.98, 0],
        [1.01, -1.34, 0],
        [-0.28, 1.32, 0],
        [0.62, -1.32, 0],
        [0.4, 0.9, 1],
        [0.28, -0.09, 1],
        [-1.07, 1.32, 0],
        [1.56, -0.26, 0],
        [1, 0.23, 1],
        [-0.06, 0.48, 1],
        [-0.18, -0.1, 1],
        [-0.53, 0.2, 1],
        [0.9, 0.15, 1],
        [-0.51, 1.68, 0],
        [-0.76, 0.28, 1],
        [0.25, 0.78, 1],
        [1.68, 0.67, 0],
        [-1.48, -0.43, 0],
        [-1.64, -1.39, 0],
        [0.76, -0.92, 0],
        [1.09, 0.51, 1],
        [0.65, 0.67, 1],
        [-0.37, 0.17, 1],
        [-1.06, -0.23, 0],
        [0.59, 1.42, 0],
        [-1.32, 0.23, 0]
    ])

    x = data[:, :2]
    y = data[:, 2]

    # Reshape y to be a column vector
    y = y.reshape(-1, 1)
    return x, y

def dataset_4_14():
    pass


def dataset_4_17():
    pass