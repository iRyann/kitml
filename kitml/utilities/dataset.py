from sklearn.datasets import make_blobs
import numpy as np

def simple_linear_set() :
    X, y = make_blobs(n_samples=100, n_features=2, centers=2, random_state=0)
    y = y.reshape((y.shape[0], 1))
    return X,y

def and_set() :
    X = np.array([[0,0],[0,1],[1,0],[1,1]])
    y = np.array([0,0,0,1]).reshape(4, 1)
    return X,y

def xor_set():
    X = np.array([[0,0],[0,1],[1,0],[1,1]])
    y = np.array([0,1,1,0]).reshape(4, 1)
    return X,y

def dataset_2_9():
    X = np.array([
        [1, 6],
        [7, 9],
        [1, 9],
        [7, 10],
        [2, 5],
        [2, 7],
        [2, 8],
        [6, 8],
        [6, 9],
        [3, 5],
        [3, 6],
        [3, 8],
        [3, 9],
        [5, 7],
        [5, 8],
        [5, 10],
        [5, 11],
        [4, 6],
        [4, 7],
        [4, 9],
        [4, 10]
    ])

    y = np.array([
        1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1
    ])

    y = y.reshape((y.shape[0], 1))

    return X, y

def dataset_2_10():
    X = np.array([
        [1, 2], [1, 4], [1, 5], [7, 5], [7, 6],
        [2, 1], [2, 3], [2, 4], [6, 2], [6, 4],
        [6, 5], [3, 1], [3, 2], [3, 4], [3, 5],
        [5, 3], [5, 4], [5, 6], [5, 7], [4, 2],
        [4, 3], [4, 5], [4, 6]
        ])

    y = np.array([
        1, 0, 1, 0, 0,
        0, 1, 0, 1, 0,
        0, 0, 0, 1, 1,
        0, 0, 1, 1, 0,
        1, 1, 1
        ])
    
    y = y.reshape((y.shape[0], 1))
    return X, y

def dataset_2_11():
    X = np.array([
        10, 14, 12, 18, 16, 14, 22, 28, 26, 16,
        23, 25, 20, 20, 24, 12, 15, 18, 14, 26,
        25, 17, 12, 20, 23, 22, 26, 22, 18, 21
    ]).reshape(-1, 1)

    y = np.array([
        4.4, 5.6, 4.6, 6.1, 6.0, 7.0, 6.8, 10.6, 11.0, 7.6,
        10.8, 10.0, 6.5, 8.2, 8.8, 5.5, 5.0, 8.0, 7.8, 9.0,
        9.4, 8.5, 6.4, 7.5, 9.0, 8.1, 8.2, 10.0, 9.1, 9.0
    ])

    y = y.reshape((y.shape[0], 1))
    return X, y

def dataset_3_1():
    # First, let's create empty lists to store our data
    X = []  # Features
    y = []  # Class labels (original 1, 2, 3)

    # Parse the data from the table
    data_rows = [
        # First class (Cl=1)
        [-1.2, 1.6, 1, 1, -1, -1], [-1.2, 1.5, 1, 1, -1, -1], [-1.2, 1, 1, 1, -1, -1],
        [-1.3, 1.7, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1], [-1.4, 1.7, 1, 1, -1, -1],
        [-1.2, 1.4, 1, 1, -1, -1], [-1.2, 1.6, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1],
        [-1.2, 1.6, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1], [-1.5, 1.7, 1, 1, -1, -1],
        [-1.3, 1.5, 1, 1, -1, -1], [-1.2, 1.2, 1, 1, -1, -1], [-1.2, 1.6, 1, 1, -1, -1],
        [-1.4, 1.5, 1, 1, -1, -1], [-1.3, 1.4, 1, 1, -1, -1], [-1.2, 1.7, 1, 1, -1, -1],
        [-1.2, 1.6, 1, 1, -1, -1], [-1.2, 1.9, 1, 1, -1, -1], [-1.2, 1.5, 1, 1, -1, -1],
        [-1.4, 1.5, 1, 1, -1, -1], [-1.1, 1.5, 1, 1, -1, -1], [-1.2, 1.7, 1, 1, -1, -1],
        [-1.2, 1.5, 1, 1, -1, -1], [-1.3, 1.3, 1, 1, -1, -1], [-1.1, 1.5, 1, 1, -1, -1],
        [-1.2, 1.5, 1, 1, -1, -1], [-1.2, 1.3, 1, 1, -1, -1], [-1.2, 1.3, 1, 1, -1, -1],
        [-1.4, 1.5, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1], [-1.1, 1.4, 1, 1, -1, -1],
        [-1.6, 1.6, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1], [-1.2, 1.5, 1, 1, -1, -1],
        [-1.3, 1.5, 1, 1, -1, -1], [-1.3, 1.3, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1],
        [-1.2, 1.2, 1, 1, -1, -1], [-1.2, 1.3, 1, 1, -1, -1], [-1.2, 1.4, 1, 1, -1, -1],
        [-1.1, 1.5, 1, 1, -1, -1], [-1.4, 1.9, 1, 1, -1, -1], [-1.2, 1.6, 1, 1, -1, -1],
        
        # Second class (Cl=2)
        [1.3, 5.6, 2, -1, 1, -1], [1.4, 6.1, 2, -1, 1, -1], [1.5, 5.9, 2, -1, 1, -1],
        [1.3, 5.6, 2, -1, 1, -1], [1.4, 5.2, 2, -1, 1, -1], [1.2, 5.5, 2, -1, 1, -1],
        [1.4, 6.7, 2, -1, 1, -1], [1, 5.7, 2, -1, 1, -1], [1.6, 6, 2, -1, 1, -1],
        [1.4, 5.8, 2, -1, 1, -1], [1.4, 6.1, 2, -1, 1, -1], [1.3, 5.7, 2, -1, 1, -1],
        [1, 5.5, 2, -1, 1, -1], [1.1, 5, 2, -1, 1, -1], [1.3, 6.6, 2, -1, 1, -1],
        [1.6, 6, 2, -1, 1, -1], [1.4, 5.8, 2, -1, 1, -1], [1.2, 5.7, 2, -1, 1, -1],
        [1, 4.9, 2, -1, 1, -1], [1.3, 5.7, 2, -1, 1, -1], [1.3, 5.5, 2, -1, 1, -1],
        [1.8, 5.9, 2, -1, 1, -1], [1.5, 6.3, 2, -1, 1, -1], [1.4, 5, 2, -1, 1, -1],
        [1.3, 6.3, 2, -1, 1, -1], [1.4, 7, 2, -1, 1, -1], [1.4, 6.6, 2, -1, 1, -1],
        [1.2, 5.8, 2, -1, 1, -1], [1.5, 6.2, 2, -1, 1, -1], [1.5, 6.4, 2, -1, 1, -1],
        [1.5, 5.4, 2, -1, 1, -1], [1.5, 6, 2, -1, 1, -1], [1.5, 6.9, 2, -1, 1, -1],
        [1.3, 6.4, 2, -1, 1, -1], [1.1, 5.1, 2, -1, 1, -1], [1.1, 5.6, 2, -1, 1, -1],
        [1.3, 5.6, 2, -1, 1, -1], [1.7, 6.7, 2, -1, 1, -1], [1.5, 6.5, 2, -1, 1, -1],
        [1.5, 5.6, 2, -1, 1, -1], [1.3, 5.7, 2, -1, 1, -1], [1.2, 6.1, 2, -1, 1, -1],
        [1.4, 6.8, 2, -1, 1, -1], [1.3, 6.2, 2, -1, 1, -1], [1.5, 6.7, 2, -1, 1, -1],
        
        # Third class (Cl=3)
        [2.8, 1.9, 3, -1, -1, 1], [2.9, 1.8, 3, -1, -1, 1], [2.2, 1.5, 3, -1, -1, 1],
        [2.5, 1.7, 3, -1, -1, 1], [3.1, 2.3, 3, -1, -1, 1], [2.8, 2.4, 3, -1, -1, 1],
        [3.3, 2.5, 3, -1, -1, 1], [3.4, 2.3, 3, -1, -1, 1], [3, 1.6, 3, -1, -1, 1],
        [3.1, 2.1, 3, -1, -1, 1], [2.6, 1.4, 3, -1, -1, 1], [3.1, 2.1, 3, -1, -1, 1],
        [2.7, 1.9, 3, -1, -1, 1], [3, 1.8, 3, -1, -1, 1], [2.8, 2, 3, -1, -1, 1],
        [3, 1.6, 3, -1, -1, 1], [2.9, 1.8, 3, -1, -1, 1], [3, 1.8, 3, -1, -1, 1],
        [2.8, 1.5, 3, -1, -1, 1], [2.8, 2.2, 3, -1, -1, 1], [3.2, 1.8, 3, -1, -1, 1],
        [3, 2.1, 3, -1, -1, 1], [3.3, 2.5, 3, -1, -1, 1], [3.1, 2.4, 3, -1, -1, 1],
        [2.7, 1.9, 3, -1, -1, 1], [3.2, 2.3, 3, -1, -1, 1], [3, 2.1, 3, -1, -1, 1],
        [3.2, 2, 3, -1, -1, 1], [3, 2, 3, -1, -1, 1], [3.2, 2.3, 3, -1, -1, 1],
        [2.8, 2, 3, -1, -1, 1], [3.6, 2.5, 3, -1, -1, 1], [3.4, 2.4, 3, -1, -1, 1],
        [3, 2.3, 3, -1, -1, 1], [2.5, 1.8, 3, -1, -1, 1], [2.6, 2.3, 3, -1, -1, 1],
        [3, 2.2, 3, -1, -1, 1], [3, 1.8, 3, -1, -1, 1], [3.2, 1.8, 3, -1, -1, 1],
        [2.7, 1.8, 3, -1, -1, 1], [3, 1.8, 3, -1, -1, 1], [2.7, 1.9, 3, -1, -1, 1],
        [2.5, 1.9, 3, -1, -1, 1], [3.3, 2.1, 3, -1, -1, 1], [2.8, 1.8, 3, -1, -1, 1],
    ]

    # Process the data into features, class labels, and one-hot encoding
    for row in data_rows:
        X.append([row[0], row[1]])  # Features: x1, x2
        y.append(row[2] - 1)        # Class label: adjust Cl (1,2,3) to (0,1,2)

    # Convert lists to numpy arrays
    X = np.array(X)
    y = np.array(y).reshape(-1, 1)  # Reshape y to be a column vector

    return X, y

def dataset_3_5():
    data_rows = [
        # Format: [x1, x2, ..., x25, d1, d2, d3, d4]
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, -1],
        [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -1, 1, -1, -1],
        [1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, -1, -1, 1, -1],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, -1, -1, -1, 1]
    ]

    # Extraire X (features) et y (labels)
    X = np.array([row[:25] for row in data_rows])

    # Déterminer la classe à partir des colonnes d1, d2, d3, d4
    y = np.zeros(len(data_rows), dtype=int)
    for i, row in enumerate(data_rows):
        # La classe est l'index (0-based) de la valeur 1 dans d1, d2, d3, d4
        for j in range(4):
            if row[25+j] == 1:
                y[i] = j
                break

    y = y.reshape(-1, 1)  # Reshape y to be a column vector

    return X, y

print("Dataset 3.5:")
X, y = dataset_3_5()
print("X shape:", X.shape)
print("y shape:", y.shape)
print("X:", X)
print("y:", y)